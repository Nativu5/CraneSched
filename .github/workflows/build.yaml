name: Build and Upload Packages

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - release/*
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    defaults:
      run:
        shell: bash -leo pipefail {0}

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          path: ${{ github.workspace }}/CraneSched

      # Checkout frontend
      - name: Checkout frontend
        uses: actions/checkout@v4
        with:
          repository: PKUHPC/CraneSched-FrontEnd
          path: ${{ github.workspace }}/CraneSched-FrontEnd
      
      # Pull CI Image and get external scripts
      - name: Pull CI Image
        run: |
          pwd
          cd ${{ github.workspace }}
          podman pull ghcr.io/nativu5/cranedev:ci
          cp -r ../script . 

      - name: Run Build and Packaging in Container
        run: |
          mkdir -p output
          podman run --rm \
              -v ./CraneSched:/Workspace/CraneSched \
              -v ./CraneSched-FrontEnd:/Workspace/CraneSched-FrontEnd \
              -v ./output:/Workspace/output \
              -v ./script:/Workspace/script \
              ghcr.io/nativu5/cranedev:ci /bin/bash --login script/build.sh

      # Collect and upload artifacts
      - name: Count Artifacts
        run: |
          ARTIFACT_NAME_CRANED_DEB=$(basename $(ls output/*craned.rpm))
          ARTIFACT_NAME_CRANED_RPM=$(basename $(ls output/*craned.deb))
          ARTIFACT_NAME_CRANECTLD_DEB=$(basename $(ls output/*cranectld.rpm))
          ARTIFACT_NAME_CRANECTLD_RPM=$(basename $(ls output/*cranectld.deb))
          ARTIFACT_NAME_FRONTEND=bin
          ARTIFACT_NAME_PLUGIN=plugin
          echo "ARTIFACT_NAME_CRANED_DEB=$ARTIFACT_NAME_CRANED_DEB" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_CRANED_RPM=$ARTIFACT_NAME_CRANED_RPM" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_CRANECTLD_DEB=$ARTIFACT_NAME_CRANECTLD_DEB" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_CRANECTLD_RPM=$ARTIFACT_NAME_CRANECTLD_RPM" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_FRONTEND=$ARTIFACT_NAME_FRONTEND" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_PLUGIN=$ARTIFACT_NAME_PLUGIN" >> $GITHUB_ENV

      - name: Upload craned .deb package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANED_DEB }}
          path: output/${{ env.ARTIFACT_NAME_CRANED_DEB }}
          retention-days: 30
          if-no-files-found: error

      - name: Upload craned .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANED_RPM }}
          path: output/${{ env.ARTIFACT_NAME_CRANED_RPM }}
          retention-days: 30
          if-no-files-found: error

      - name: Upload cranectld .deb package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANECTLD_DEB }}
          path: output/${{ env.ARTIFACT_NAME_CRANECTLD_DEB }}
          retention-days: 30
          if-no-files-found: error

      - name: Upload cranectld .rpm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME_CRANECTLD_RPM }}
          path: output/${{ env.ARTIFACT_NAME_CRANECTLD_RPM }}
          retention-days: 30
          if-no-files-found: error

      - name: Upload frontend
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: output/${{ env.ARTIFACT_NAME_FRONTEND }}
          retention-days: 30
          if-no-files-found: error
      
      - name: Upload plugin
        uses: actions/upload-artifact@v4
        with:
          name: plugin
          path: output/${{ env.ARTIFACT_NAME_PLUGIN }}
          retention-days: 30
          if-no-files-found: error

      # Run AutoTest
      - name: Run AutoTest
        run: |
          NETWORK_ID=$(podman container inspect mongodb | jq -r '.[0].NetworkSettings.Networks | keys[]')
          podman run -d --rm --name autotest \
            --privileged \
            --systemd true \
            -v /lib/modules:/lib/modules:ro \
            -v ./output:/CraneSched-AutoTest/output \
            --network $NETWORK_ID \
            localhost/autotest
          podman exec autotest /bin/bash --login script/run.sh
      
      # Upload AutoTest Results
      - name: Upload AutoTest Results
        uses: actions/upload-artifact@v4
        with:
          name: result.json
          path: output/result.json
          retention-days: 30
          if-no-files-found: error
